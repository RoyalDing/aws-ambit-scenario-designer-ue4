{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AWS Ambit Scenario Designer for Unreal Engine 4 \u00b6 AWS Ambit Scenario Designer for Unreal Engine 4 (Ambit) is a suite of tools to streamline 3D content creation at scale for autonomous vehicle and robotics simulation applications. From procedural placement of obstacles to automatic generation of whole cities, Ambit can help you quickly create the 3D environments and scenarios you need for your simulations or other 3D applications. Ambit is implemented as a plugin for the Windows version of Unreal Engine 4 (UE4). However, the content you create with Ambit can be exported and used with other versions of UE4 (Mac, Linux) or even non-UE4 simulators and 3D tools. Ambit has been tested for compatibility with Unreal Engine 4.27 . \ud83d\udce3 Attention: During the usage of this plugin tool Ambit will collect generic metrics to inform AWS about usage patterns and performance of Ambit's individual features. These metrics contain no personally identifiable information and are not shared or transferred. If you prefer to opt out from this metrics collection you can do so by making a small code modification and compiling the Ambit plugin from source. Within the Ambit plugin folder, edit the C++ header file Source/Ambit/Utils/UserMetricsSubsystem.h to make the RecordUserMetrics field false. Full details on how to compile Ambit from source can be found in \"Appendix: Contributing to Ambit Development\" .","title":"Welcome"},{"location":"#welcome-to-aws-ambit-scenario-designer-for-unreal-engine-4","text":"AWS Ambit Scenario Designer for Unreal Engine 4 (Ambit) is a suite of tools to streamline 3D content creation at scale for autonomous vehicle and robotics simulation applications. From procedural placement of obstacles to automatic generation of whole cities, Ambit can help you quickly create the 3D environments and scenarios you need for your simulations or other 3D applications. Ambit is implemented as a plugin for the Windows version of Unreal Engine 4 (UE4). However, the content you create with Ambit can be exported and used with other versions of UE4 (Mac, Linux) or even non-UE4 simulators and 3D tools. Ambit has been tested for compatibility with Unreal Engine 4.27 . \ud83d\udce3 Attention: During the usage of this plugin tool Ambit will collect generic metrics to inform AWS about usage patterns and performance of Ambit's individual features. These metrics contain no personally identifiable information and are not shared or transferred. If you prefer to opt out from this metrics collection you can do so by making a small code modification and compiling the Ambit plugin from source. Within the Ambit plugin folder, edit the C++ header file Source/Ambit/Utils/UserMetricsSubsystem.h to make the RecordUserMetrics field false. Full details on how to compile Ambit from source can be found in \"Appendix: Contributing to Ambit Development\" .","title":"Welcome to AWS Ambit Scenario Designer for Unreal Engine 4"},{"location":"appendix-contributing/","text":"Appendix: Contributing to Ambit Development \u00b6 This section provides important information for anyone who would like to contribute to the development of the Ambit tools or to make custom modifications to Ambit for their own purposes. It covers technical setup and developer workflow. For general contributing guidelines and process, see the repository's CONTRIBUTING file. \u270f\ufe0f This guide assumes you already have Unreal Engine development experience. Setup \u00b6 Ensure you have completed the main Setup > Initial Setup (One-Time) instructions from this user guide. In addition to having Unreal Engine 4.27 installed, you will also need the Microsoft Visual Studio development tools required for UE4 C++ development. If you need help with these setup steps, refer to the Unreal Engine 4 documentation, especially \"Setting Up Visual Studio for Unreal Engine\" . Create a new Unreal Engine C++ project to use as a host project while you work on Ambit development. The only configuration requirements for this project is that you designate it as a C++ project rather than a Blueprint project when prompted. Otherwise, you can keep all other project configuration settings at their defaults or change them to your liking. Create a \"Plugins\" folder at the root of your UE project folder. Clone the Ambit repository into the \"Plugins\" folder. The result will look like this... <your sample project>\\Plugins\\aws-ambit-scenario-designer-ue4\\ Once the Ambit plugin repository has been cloned, right-click on the *.uproject file at the root of the project directory and select the \"Generate Visual Studio project files\" option. Select the appropriate engine version if required. A new Visual Studio solution file ( *.sln ) will be generated for you. Launch your sample project by clicking on the *.uproject file. When prompted to rebuild missing modules, click \"Yes\". Next, you'll need to enable some plugins to support running automated tests. Once the project opens, enable the following plugins: Functional Testing Editor Runtime Tests Editor Tests Restart (or simply close) the editor for the plugins to take effect. Development Workflow \u00b6 Follow this workflow when making changes to the Ambit C++ code... Launch the project's *.sln file in Visual Studio. In the Solution Explorer window, right-click on your project and select Set as Startup Project . Make your code edits. Compile and run the solution through either of these methods: To build only: Select Build > Build Solution from the Visual Studio menubar To build and run: Press the Local Windows Debugger button (or press F5 ). Repeat steps 3-4 as needed. Testing \u00b6 Running Automated Tests \u00b6 The Ambit plugin includes a number of automated tests. Automated test files, called \"specs\", end with a *.spec.cpp file extension and are usually located next to the files that they test. These tests will be automatically recognized by the Unreal Engine test runner. To run the tests: First open the Test Automation window ( Window > Test Automation ). Select the Automation tab. Tick the box next to the Ambit group of tests. Click the Start Tests button. \ud83d\udca1 Tip: For more info on working with automated tests in UE see \"Automation Spec Overview\" Test Maps \u00b6 A sample map is provided to aid in manual testing of the various Ambit spawner actors: /Ambit Content/Test/Maps/ProceduralPlacementTestMap A sample map is provided to aid in manual testing of the Environment FX actor: Ambit Content/EnvironmentFX/TestMap/TestWeatherMap Testing Scenario Import/Export \u00b6 To manually test scenario import and export functionality, follow these steps: First set some random parameters in the Scenario Settings section of the Ambit Mode. Click the \"Export Scenario\" Button at the bottom of the Scenario Settings section and save the *.sdf.json file. Verify the file was created in the destination location you specified. Reset all the values of your Scenario Settings section or re-load the project. Click the ... next to Scenario Name and import the *.sdf.json file. Confirm that all settings were restored as expected. Packaging a Release Build \u00b6 To create a packaged version of the plugin for distribution, follow these steps: Click the Edit tab and open Plugins window. Find the AWS Ambit Scenario Designer plugin. Click the Package button and choose the folder to which you would like to save the plugin. Wait for the packaging process to complete and use the Output Log panel to check for any warnings or errors. You can use this pre-built plugin in both Unreal Engine C++ and Blueprint Projects by installing it in your project's \"Plugins\" folder or the Engine \"Plugins\" folder. Contributing to the User Guide \u00b6 To contribute to the User Guide, follow the instructions listed here . Dependencies \u00b6 The Ambit plugin uses a subset of the AWS SDK for C++ to communicate with AWS services. A precompiled version of these libraries ( Version 1.9 ) has been included in this repository and encapsulated as a module called \"AWSUE4Module\".","title":"Appendix: Contributing to Ambit Development"},{"location":"appendix-contributing/#appendix-contributing-to-ambit-development","text":"This section provides important information for anyone who would like to contribute to the development of the Ambit tools or to make custom modifications to Ambit for their own purposes. It covers technical setup and developer workflow. For general contributing guidelines and process, see the repository's CONTRIBUTING file. \u270f\ufe0f This guide assumes you already have Unreal Engine development experience.","title":"Appendix: Contributing to Ambit Development"},{"location":"appendix-contributing/#setup","text":"Ensure you have completed the main Setup > Initial Setup (One-Time) instructions from this user guide. In addition to having Unreal Engine 4.27 installed, you will also need the Microsoft Visual Studio development tools required for UE4 C++ development. If you need help with these setup steps, refer to the Unreal Engine 4 documentation, especially \"Setting Up Visual Studio for Unreal Engine\" . Create a new Unreal Engine C++ project to use as a host project while you work on Ambit development. The only configuration requirements for this project is that you designate it as a C++ project rather than a Blueprint project when prompted. Otherwise, you can keep all other project configuration settings at their defaults or change them to your liking. Create a \"Plugins\" folder at the root of your UE project folder. Clone the Ambit repository into the \"Plugins\" folder. The result will look like this... <your sample project>\\Plugins\\aws-ambit-scenario-designer-ue4\\ Once the Ambit plugin repository has been cloned, right-click on the *.uproject file at the root of the project directory and select the \"Generate Visual Studio project files\" option. Select the appropriate engine version if required. A new Visual Studio solution file ( *.sln ) will be generated for you. Launch your sample project by clicking on the *.uproject file. When prompted to rebuild missing modules, click \"Yes\". Next, you'll need to enable some plugins to support running automated tests. Once the project opens, enable the following plugins: Functional Testing Editor Runtime Tests Editor Tests Restart (or simply close) the editor for the plugins to take effect.","title":"Setup"},{"location":"appendix-contributing/#development-workflow","text":"Follow this workflow when making changes to the Ambit C++ code... Launch the project's *.sln file in Visual Studio. In the Solution Explorer window, right-click on your project and select Set as Startup Project . Make your code edits. Compile and run the solution through either of these methods: To build only: Select Build > Build Solution from the Visual Studio menubar To build and run: Press the Local Windows Debugger button (or press F5 ). Repeat steps 3-4 as needed.","title":"Development Workflow"},{"location":"appendix-contributing/#testing","text":"","title":"Testing"},{"location":"appendix-contributing/#packaging-a-release-build","text":"To create a packaged version of the plugin for distribution, follow these steps: Click the Edit tab and open Plugins window. Find the AWS Ambit Scenario Designer plugin. Click the Package button and choose the folder to which you would like to save the plugin. Wait for the packaging process to complete and use the Output Log panel to check for any warnings or errors. You can use this pre-built plugin in both Unreal Engine C++ and Blueprint Projects by installing it in your project's \"Plugins\" folder or the Engine \"Plugins\" folder.","title":"Packaging a Release Build"},{"location":"appendix-contributing/#contributing-to-the-user-guide","text":"To contribute to the User Guide, follow the instructions listed here .","title":"Contributing to the User Guide"},{"location":"appendix-contributing/#dependencies","text":"The Ambit plugin uses a subset of the AWS SDK for C++ to communicate with AWS services. A precompiled version of these libraries ( Version 1.9 ) has been included in this repository and encapsulated as a module called \"AWSUE4Module\".","title":"Dependencies"},{"location":"aws-setup/","text":"Working with AWS in Ambit \u00b6 Ambit integrates with Amazon Simple Storage Service (Amazon S3) to help centralize various files into a cloud storage that can then be re-imported easily from any computer. Setup \u00b6 To successfully utilize an S3 bucket, AWS credentials need to be configured in your environment for a role that has access to the S3 bucket. Follow this guide for step-by-step instructions. Configure AWS Settings \u00b6 Once the account has the correct permissions, find the AWS Settings menu inside of AWS Ambit Scenario Mode , then select the AWS region of your S3 bucket and input the bucket name. If the bucket doesn't already exist it will be automatically created for you. Note: S3 bucket names must adhere to the bucket naming rules Ambit will utilize this setting throughout to upload and download from the bucket specified.","title":"Working with AWS in Ambit"},{"location":"aws-setup/#working-with-aws-in-ambit","text":"Ambit integrates with Amazon Simple Storage Service (Amazon S3) to help centralize various files into a cloud storage that can then be re-imported easily from any computer.","title":"Working with AWS in Ambit"},{"location":"aws-setup/#setup","text":"To successfully utilize an S3 bucket, AWS credentials need to be configured in your environment for a role that has access to the S3 bucket. Follow this guide for step-by-step instructions.","title":"Setup"},{"location":"aws-setup/#configure-aws-settings","text":"Once the account has the correct permissions, find the AWS Settings menu inside of AWS Ambit Scenario Mode , then select the AWS region of your S3 bucket and input the bucket name. If the bucket doesn't already exist it will be automatically created for you. Note: S3 bucket names must adhere to the bucket naming rules Ambit will utilize this setting throughout to upload and download from the bucket specified.","title":"Configure AWS Settings"},{"location":"building-generator/","text":"Using the Ambit Building Generator \u00b6 Using the UE editor's Content Browser, navigate to the Ambit Content > ProceduralTools folder. Then, right-click on the AmbitBuildingGenerator and select \"Instantiate at the origin\" . \u270f\ufe0f Note: If you don't see the Ambit Content folder listed in the Content Browser you will need to enable the \"Show Plugin Content\" option using the Content Browser's View Options menu. You may also need to toggle the \"Show/Hide Sources Panel\" icon. There will be a small delay while the Houdini Engine starts in the background and then initializes the asset. Ensure that the new AmbitBuildingGenerator instance is selected in the World Outliner panel. Then, find the section of the Details panel titled Houdini Parameters . Import an OSM file that you downloaded previously by clicking the \u2026 icon next to the OSM File parameter field. Building generation will start automatically. Generation could take several minutes depending on the size and complexity of the OSM building data.","title":"Building Generator"},{"location":"building-generator/#using-the-ambit-building-generator","text":"Using the UE editor's Content Browser, navigate to the Ambit Content > ProceduralTools folder. Then, right-click on the AmbitBuildingGenerator and select \"Instantiate at the origin\" . \u270f\ufe0f Note: If you don't see the Ambit Content folder listed in the Content Browser you will need to enable the \"Show Plugin Content\" option using the Content Browser's View Options menu. You may also need to toggle the \"Show/Hide Sources Panel\" icon. There will be a small delay while the Houdini Engine starts in the background and then initializes the asset. Ensure that the new AmbitBuildingGenerator instance is selected in the World Outliner panel. Then, find the section of the Details panel titled Houdini Parameters . Import an OSM file that you downloaded previously by clicking the \u2026 icon next to the OSM File parameter field. Building generation will start automatically. Generation could take several minutes depending on the size and complexity of the OSM building data.","title":"Using the Ambit Building Generator"},{"location":"bulk-scenario-generation/","text":"Bulk Scenario Generation \u00b6 Ambit provides bulk scenario generation functionality. It does this by creating a batch of individual SDFs based on making permutations from each setting specified. Alongside those it also has a standalone file called a Bulk Scenario Configuration (BSC) file that indicates how the batch was created. Before getting started, make sure to have properly set up your AWS Account . Customize Permutation Settings \u00b6 The Permutation Settings menu can be found in AWS Ambit Scenario Mode , which allows for the settings of the permutations generated to be specified. First select the Time of Day Types and Weather Types options as appropriate for creating permutations based on these settings. Refer to the Scenario Settings for how these will look as defaults when the generation happens. Set the range of Bulk Pedestrian Traffic and Bulk Vehicle Traffic . These are both a percent value of 0 to 1, where 1 is representative of 100%. Note: The current increment is 0.1. The Number of Permutations represents how many scenarios will be generated. This value cannot be directly changed, and is for informative purposes only. Generate Permutations \u00b6 To generate the bulk permutations, set the Configuration name and Batch Name first in the Permutation Settings menu. The Configuration name is the file name of BSC file. This also serves as the suffix for the folder where the batch SDFs are located. The Batch name is the prefix of the SDFs. Ambit will automatically increment these based on the number of permutations. Clicking Generate Permutation at the bottom of the Permutation Settings menu will export your batch to Amazon S3. Locating Export in Amazon S3 \u00b6 You can locate these files in Amazon S3 by going to your account and searching for the S3 bucket created. Inside that bucket, there will be a file and a folder corresponding to the Configuration and Batch name specified above. The file with the name of the Configuration will be the BSC that is used to control the Permutation Settings on import, as well as retain information for the Ambit Spawners to allow for re-importing. The folder will contain all of the permutations that were made as SDFs. Import Permutation Settings \u00b6 If you would like to import your BSC from S3 bucket, you can input the configuration name, choose the AWS Region of S3 bucket where you store that file and input the bucket name, then click the \"...\" next to the Configuration Name field. Once imported, all of the settings from the bulk configuration alongside the spawners will be placed back into the scene. Note: Spawn With Houdini will not re-import the original HDA selected. Utilizing Bulk Scenario Generation File \u00b6 The output file will be a *.bsc.json file, which follows JSON formatting. The specifications for this file are as follows: Version: This is the version of BSC when it was initially uploaded. ConfigurationName: Refers to the Configuration Name field on screen. BulkScenarioName: Refers to the Batch Name screen on screen. TimeOfDayTypes: Refers to the permutation settings specified on screen relating to the time of day. For the individual values of these, refer to the Preset Time of Day field in the Scenario Settings. Morning: Determines if the morning setting is a valid option for the permutations. Noon: Determines if the noon setting is a valid option for the permutations. Evening: Determines if the evening setting is a valid option for the permutations. Night: Determines if the night setting is a valid option for the permutations. WeatherTypes: Refers to the permutation setting specified on screen relating to the weather. For individual values of these, refer to the Weather Types and Weather Parameter fields in the Scenario Settings. Sunny: Determines if the preset Weather Type sunny is a valid option for the permutations. Rainy: Determines if the preset Weather Type rainy is a valid option for the permutations. Foggy: Determines if the preset Weather Type foggy is a valid option for the permutations. PedestrianDensity: Determines the settings for the pedestrian density fields. Min: The permutated value to begin with for the density of pedestrians. Represented as a percent [0,1]. Max: The permutated value to end with for the density of pedestrians. Represented as a percent [0,1]. Increment: The value that will increment for the permutation settings. TrafficDensity: Determines the settings for the traffic density fields. Min: The value to begin with for the permutations of the density of traffic. Represented as a percent [0,1]. Max: The value to end with for the permutations of the density of traffic. Represented as a percent [0,1]. Increment: The value that will increment for the permutation increment. NumberOfPermutations: The total number of permutations the settings generate. AllSpawnerConfigs: A list of spawner configurations by type. AmbitSpawner*: An individual type of spawner that has specified values for it. Each spawner has its own settings. To find the specification for the SDF, please refer to this section.","title":"Automated Scenario Generation"},{"location":"bulk-scenario-generation/#bulk-scenario-generation","text":"Ambit provides bulk scenario generation functionality. It does this by creating a batch of individual SDFs based on making permutations from each setting specified. Alongside those it also has a standalone file called a Bulk Scenario Configuration (BSC) file that indicates how the batch was created. Before getting started, make sure to have properly set up your AWS Account .","title":"Bulk Scenario Generation"},{"location":"bulk-scenario-generation/#customize-permutation-settings","text":"The Permutation Settings menu can be found in AWS Ambit Scenario Mode , which allows for the settings of the permutations generated to be specified. First select the Time of Day Types and Weather Types options as appropriate for creating permutations based on these settings. Refer to the Scenario Settings for how these will look as defaults when the generation happens. Set the range of Bulk Pedestrian Traffic and Bulk Vehicle Traffic . These are both a percent value of 0 to 1, where 1 is representative of 100%. Note: The current increment is 0.1. The Number of Permutations represents how many scenarios will be generated. This value cannot be directly changed, and is for informative purposes only.","title":"Customize Permutation Settings"},{"location":"bulk-scenario-generation/#generate-permutations","text":"To generate the bulk permutations, set the Configuration name and Batch Name first in the Permutation Settings menu. The Configuration name is the file name of BSC file. This also serves as the suffix for the folder where the batch SDFs are located. The Batch name is the prefix of the SDFs. Ambit will automatically increment these based on the number of permutations. Clicking Generate Permutation at the bottom of the Permutation Settings menu will export your batch to Amazon S3.","title":"Generate Permutations"},{"location":"bulk-scenario-generation/#locating-export-in-amazon-s3","text":"You can locate these files in Amazon S3 by going to your account and searching for the S3 bucket created. Inside that bucket, there will be a file and a folder corresponding to the Configuration and Batch name specified above. The file with the name of the Configuration will be the BSC that is used to control the Permutation Settings on import, as well as retain information for the Ambit Spawners to allow for re-importing. The folder will contain all of the permutations that were made as SDFs.","title":"Locating Export in Amazon S3"},{"location":"bulk-scenario-generation/#import-permutation-settings","text":"If you would like to import your BSC from S3 bucket, you can input the configuration name, choose the AWS Region of S3 bucket where you store that file and input the bucket name, then click the \"...\" next to the Configuration Name field. Once imported, all of the settings from the bulk configuration alongside the spawners will be placed back into the scene. Note: Spawn With Houdini will not re-import the original HDA selected.","title":"Import Permutation Settings"},{"location":"bulk-scenario-generation/#utilizing-bulk-scenario-generation-file","text":"The output file will be a *.bsc.json file, which follows JSON formatting. The specifications for this file are as follows: Version: This is the version of BSC when it was initially uploaded. ConfigurationName: Refers to the Configuration Name field on screen. BulkScenarioName: Refers to the Batch Name screen on screen. TimeOfDayTypes: Refers to the permutation settings specified on screen relating to the time of day. For the individual values of these, refer to the Preset Time of Day field in the Scenario Settings. Morning: Determines if the morning setting is a valid option for the permutations. Noon: Determines if the noon setting is a valid option for the permutations. Evening: Determines if the evening setting is a valid option for the permutations. Night: Determines if the night setting is a valid option for the permutations. WeatherTypes: Refers to the permutation setting specified on screen relating to the weather. For individual values of these, refer to the Weather Types and Weather Parameter fields in the Scenario Settings. Sunny: Determines if the preset Weather Type sunny is a valid option for the permutations. Rainy: Determines if the preset Weather Type rainy is a valid option for the permutations. Foggy: Determines if the preset Weather Type foggy is a valid option for the permutations. PedestrianDensity: Determines the settings for the pedestrian density fields. Min: The permutated value to begin with for the density of pedestrians. Represented as a percent [0,1]. Max: The permutated value to end with for the density of pedestrians. Represented as a percent [0,1]. Increment: The value that will increment for the permutation settings. TrafficDensity: Determines the settings for the traffic density fields. Min: The value to begin with for the permutations of the density of traffic. Represented as a percent [0,1]. Max: The value to end with for the permutations of the density of traffic. Represented as a percent [0,1]. Increment: The value that will increment for the permutation increment. NumberOfPermutations: The total number of permutations the settings generate. AllSpawnerConfigs: A list of spawner configurations by type. AmbitSpawner*: An individual type of spawner that has specified values for it. Each spawner has its own settings. To find the specification for the SDF, please refer to this section.","title":"Utilizing Bulk Scenario Generation File"},{"location":"city-generation/","text":"Ambit provides two tools which aid in the creation of complex real-world environments - Ambit Building Generator and Ambit Road Generator . These tools accept any Open Street Map (OSM) file as input and generate 3D geometry that is simulation-ready. \u26a0\ufe0f Important: These tools leverage the Houdini Engine. Be sure you have installed both the Houdini Engine and the Houdini plugin for Unreal before using these tools. See the Setup section of this user guide for instructions. The Ambit Building Generator produces stylized buildings based on the building shapes contained in the OSM file. The Ambit Road Generator produces roadways, complete with road markings, based on the road descriptions contained in the OSM file.","title":"Overview"},{"location":"individual-scenario-generation/","text":"Individual Scenario Generation \u00b6 One of the main functionalities Ambit provides is exporting scenarios that can be used for importing into your own scene. A scenario here is defined as a collection of environment effects and objects spawned by Ambit Spawners that allow for small variance in a larger scene. Ambit provides both one-off and bulk scenario generation functionality. In both, Ambit will output a Scenario Definition File (SDF), that can be used for importing your scenario's information into other programs or re-import back to Ambit for verification and editing. Customizing Your Scenario \u00b6 You can find the Scenario Settings menu by selecting AWS Ambit Scenario Mode from the list of available modes. Environment Variables \u00b6 You can use pre-set Time Of Day and Weather options in order to quickly configure your scenario. If you would like to further customize your environment parameters, you may do so under the Weather Parameters section. Dynamic Obstacle Densities \u00b6 If you would like dynamic obstacles in your scenario, set your preferred density via the density parameters. Note: These parameters are expected to be percentages and therefore set between [0.0 - 1.0]. Import and Export \u00b6 To export your scenario, first set your Scenario Name in the settings menu. Next you can click Export at the bottom of the Scenario Settings menu. If you would ever like to import your saved scenario and edit it, click the \"...\" next to the Scenario Name field. Doing so will import all of the Scenario Settings that were saved, alongside the spawners and their configurations. Scenario Definition File Specification \u00b6 The output file will be a *.sdf.json file, which follows JSON formatting. The specifications for this file are as follows: Version: This is the version of SDF when it was initially uploaded. ScenarioName: Refers to the Scenario Name on screen. This will be the Batch Name when using bulk generation. TimeOfDay: A value [0,24) that represents the time of day, where the whole number is the hour, and the decimal is the percentgage in that hour. WeatherParameters: A group of parameters that represents what the current weather of the scenario should be. cloudiness: A value [0,100] that corresponds to how cloudy a scene should be, where 100 is entirely cloudy. precipitation: A value [0,100] that corresponds to how much rain should be present in the scene, where 100 is pouring heavily. puddles: A value [0,100] that corresponds to how much water puddling should occur on surfaces, where 100 is extremely all covered in a layer water. wetness: A value [0,100] that corresponds to how much objects in the scene appear to be wet, where 100 would have an object entirely drenched in water. fogDensity: A value [0,100] that corresponds to how much fog should be present in the scene, where 100 has the scene densely covered in fog. PedestrianDensity: A value represented as a percent [0,1] to indicate how many pedestrians should be populated to the scene. Currently, Ambit does not use this value. VehicleDensity: A value represented as a percent [0,1] to indicate how many vehicles should be populated to the scene. Currently, Ambit does not use this value. AllSpawnerConfigs: A list of spawner configurations by type. AmbitSpawner*: An individual type of spawner that has specified values for it. Each spawner has its own settings. AmbitSpawner: An object representative of static obstacles being spawned by Ambit Spawners. SpawnedObjects: A list representative of all static objects that should be spawned to screen. ActorToSpawn: A path to the actor that should be spawned. This is generally a relative path. Location: The spawned location (x, y, z) of the object relative to the world. Rotation: The spawned rotation (x, y, z) of the object relative to the world. VehiclePathGenerator: An object representative of dynamic obstacle pathing. VehicleToSpawn: A path to the actor that should be spawned. This is generally a relative path. SpeedLimit: The speed of the vehicle in cm/s. Waypoints: A list of positions on the scene (x, y, z) that the vehicle should pass through.","title":"Manual Scenario Generation"},{"location":"individual-scenario-generation/#individual-scenario-generation","text":"One of the main functionalities Ambit provides is exporting scenarios that can be used for importing into your own scene. A scenario here is defined as a collection of environment effects and objects spawned by Ambit Spawners that allow for small variance in a larger scene. Ambit provides both one-off and bulk scenario generation functionality. In both, Ambit will output a Scenario Definition File (SDF), that can be used for importing your scenario's information into other programs or re-import back to Ambit for verification and editing.","title":"Individual Scenario Generation"},{"location":"individual-scenario-generation/#customizing-your-scenario","text":"You can find the Scenario Settings menu by selecting AWS Ambit Scenario Mode from the list of available modes.","title":"Customizing Your Scenario"},{"location":"individual-scenario-generation/#import-and-export","text":"To export your scenario, first set your Scenario Name in the settings menu. Next you can click Export at the bottom of the Scenario Settings menu. If you would ever like to import your saved scenario and edit it, click the \"...\" next to the Scenario Name field. Doing so will import all of the Scenario Settings that were saved, alongside the spawners and their configurations.","title":"Import and Export"},{"location":"individual-scenario-generation/#scenario-definition-file-specification","text":"The output file will be a *.sdf.json file, which follows JSON formatting. The specifications for this file are as follows: Version: This is the version of SDF when it was initially uploaded. ScenarioName: Refers to the Scenario Name on screen. This will be the Batch Name when using bulk generation. TimeOfDay: A value [0,24) that represents the time of day, where the whole number is the hour, and the decimal is the percentgage in that hour. WeatherParameters: A group of parameters that represents what the current weather of the scenario should be. cloudiness: A value [0,100] that corresponds to how cloudy a scene should be, where 100 is entirely cloudy. precipitation: A value [0,100] that corresponds to how much rain should be present in the scene, where 100 is pouring heavily. puddles: A value [0,100] that corresponds to how much water puddling should occur on surfaces, where 100 is extremely all covered in a layer water. wetness: A value [0,100] that corresponds to how much objects in the scene appear to be wet, where 100 would have an object entirely drenched in water. fogDensity: A value [0,100] that corresponds to how much fog should be present in the scene, where 100 has the scene densely covered in fog. PedestrianDensity: A value represented as a percent [0,1] to indicate how many pedestrians should be populated to the scene. Currently, Ambit does not use this value. VehicleDensity: A value represented as a percent [0,1] to indicate how many vehicles should be populated to the scene. Currently, Ambit does not use this value. AllSpawnerConfigs: A list of spawner configurations by type. AmbitSpawner*: An individual type of spawner that has specified values for it. Each spawner has its own settings. AmbitSpawner: An object representative of static obstacles being spawned by Ambit Spawners. SpawnedObjects: A list representative of all static objects that should be spawned to screen. ActorToSpawn: A path to the actor that should be spawned. This is generally a relative path. Location: The spawned location (x, y, z) of the object relative to the world. Rotation: The spawned rotation (x, y, z) of the object relative to the world. VehiclePathGenerator: An object representative of dynamic obstacle pathing. VehicleToSpawn: A path to the actor that should be spawned. This is generally a relative path. SpeedLimit: The speed of the vehicle in cm/s. Waypoints: A list of positions on the scene (x, y, z) that the vehicle should pass through.","title":"Scenario Definition File Specification"},{"location":"map-export/","text":"Export Options \u00b6 Ambit provides two export options: To cook and export the current map: This option will contain all the files and folders required by Unreal Engine including Icons, Materials, Textures, etc. To convert the map to glTF (glTF or GLB): This option exports either a single binary file (GLB) that contains all the associated texture and material information, or a glTF file along with all the texture files. Both options export the map for a target platform and upload the contents to Amazon S3. Before getting started, make sure to have properly set up your AWS Account . Select TargetPlatforms And Export Map \u00b6 You can find the Map Export Settings menu in AWS Ambit Scenario Mode . First you can select the Export Platforms of your permutation via the checkboxes. Note : Platforms here mean standalone runtime platform. Next you can click Export Map at the bottom of the Map Export Settings menu. The exported content with name ${MapName}_${Platform} will be uploaded to S3 bucket. Export as glTF \u00b6 The second option to export the map is as glTF. After configuring the AWS Settings and selecting an Export Platform , you can select the target file type using the dropdown menu. Once you click the Export glTF button, the converted map along with all other metadata (textures, materials, etc.) will be uploaded to the configured S3 bucket as a zipped folder in the format ${MapName}_${GltfFileType}. Note: This option only works if there is at least one static mesh available for export. Any actors that aren't static mesh actors will not be exported, such as lighting, Ambit Spawners, etc.","title":"Export Map Options"},{"location":"map-export/#export-options","text":"Ambit provides two export options: To cook and export the current map: This option will contain all the files and folders required by Unreal Engine including Icons, Materials, Textures, etc. To convert the map to glTF (glTF or GLB): This option exports either a single binary file (GLB) that contains all the associated texture and material information, or a glTF file along with all the texture files. Both options export the map for a target platform and upload the contents to Amazon S3. Before getting started, make sure to have properly set up your AWS Account .","title":"Export Options"},{"location":"map-export/#select-targetplatforms-and-export-map","text":"You can find the Map Export Settings menu in AWS Ambit Scenario Mode . First you can select the Export Platforms of your permutation via the checkboxes. Note : Platforms here mean standalone runtime platform. Next you can click Export Map at the bottom of the Map Export Settings menu. The exported content with name ${MapName}_${Platform} will be uploaded to S3 bucket.","title":"Select TargetPlatforms And Export Map"},{"location":"map-export/#export-as-gltf","text":"The second option to export the map is as glTF. After configuring the AWS Settings and selecting an Export Platform , you can select the target file type using the dropdown menu. Once you click the Export glTF button, the converted map along with all other metadata (textures, materials, etc.) will be uploaded to the configured S3 bucket as a zipped folder in the format ${MapName}_${GltfFileType}. Note: This option only works if there is at least one static mesh available for export. Any actors that aren't static mesh actors will not be exported, such as lighting, Ambit Spawners, etc.","title":"Export as glTF"},{"location":"obtaining-osm/","text":"Obtaining an OpenStreetMap File \u00b6 OpenStreetMap files representing any location in the world can be exported directly from the OpenStreetMap website . Note that the number and size of buildings contained in the map area will impact how long the Ambit tools take to process the map. When trying the tools for the first time, we recommend using a map area that is equivalent to a few city blocks square (roughly 2,000 ft. by 2,000 ft.) or smaller.","title":"Obtaining OpenStreetMap Files"},{"location":"obtaining-osm/#obtaining-an-openstreetmap-file","text":"OpenStreetMap files representing any location in the world can be exported directly from the OpenStreetMap website . Note that the number and size of buildings contained in the map area will impact how long the Ambit tools take to process the map. When trying the tools for the first time, we recommend using a map area that is equivalent to a few city blocks square (roughly 2,000 ft. by 2,000 ft.) or smaller.","title":"Obtaining an OpenStreetMap File"},{"location":"road-generator/","text":"Using the Ambit Road Generator (Experimental) \u00b6 \ud83e\uddea The Ambit Road Generator is currently considered experimental. There are many types of road configurations that it doesn't handle well at the moment. Using the UE editor's Content Browser, navigate to the Ambit Content > ProceduralTools folder. Then, right-click on the AmbitRoadGenerator and select \"Instantiate at the origin\" . \u270f\ufe0f Note: If you don't see the Ambit Content folder listed in the Content Browser you will need to enable the \"Show Plugin Content\" option using the Content Browser's View Options menu. You may also need to toggle the \"Show/Hide Sources Panel\" icon. There will be a small delay while the Houdini Engine starts in the background and then initializes the asset. Ensure that the new AmbitRoadGenerator instance is selected in the World Outliner panel. Then, find the section of the Details panel titled Houdini Parameters . Import an OSM file that you downloaded previously by clicking the \u2026 icon next to the OSM File parameter field. Road generation will start automatically. Generation time may range from a few seconds to a few minutes.","title":"Road Generator"},{"location":"road-generator/#using-the-ambit-road-generator-experimental","text":"\ud83e\uddea The Ambit Road Generator is currently considered experimental. There are many types of road configurations that it doesn't handle well at the moment. Using the UE editor's Content Browser, navigate to the Ambit Content > ProceduralTools folder. Then, right-click on the AmbitRoadGenerator and select \"Instantiate at the origin\" . \u270f\ufe0f Note: If you don't see the Ambit Content folder listed in the Content Browser you will need to enable the \"Show Plugin Content\" option using the Content Browser's View Options menu. You may also need to toggle the \"Show/Hide Sources Panel\" icon. There will be a small delay while the Houdini Engine starts in the background and then initializes the asset. Ensure that the new AmbitRoadGenerator instance is selected in the World Outliner panel. Then, find the section of the Details panel titled Houdini Parameters . Import an OSM file that you downloaded previously by clicking the \u2026 icon next to the OSM File parameter field. Road generation will start automatically. Generation time may range from a few seconds to a few minutes.","title":"Using the Ambit Road Generator (Experimental)"},{"location":"setup/","text":"Setup \u00b6 Initial Setup (One-Time) \u00b6 Complete the following setup before using Ambit for the first time. \u23f1 Initial setup takes about 20 minutes. \ud83d\uded1 Ambit is implemented as a plugin for the Windows version of Unreal Engine 4 (UE4). Therefore, Windows is required. However, the content you create with Ambit can be exported and used with other versions of UE4 (Mac, Linux) or even non-UE4 simulators and 3D tools. \ud83d\uded1 These instructions assume you already have Unreal Engine 4.27 installed. If you don't, you can download Unreal Engine for free . Choose the Unreal Engine license that is appropriate for your team. Ambit will work with any Unreal Engine license. 1. Download the Ambit plugin for UE4 \u00b6 Download the latest pre-built release of the Ambit UE4 plugin from the GitHub Releases section . Unzip the file you downloaded. You may unzip it to any location that's convenient for you. It will unzip as a folder named \"AwsAmbit\". We'll return to the Ambit plugin in later steps. 2. Install the AWS Command Line Interface \u00b6 You will be configuring your computer to communicate with AWS services. The easiest way to do this is by installing the AWS Command Line Interface (AWS CLI). Install the AWS CLI to your local computer following the \"Install/Update\" instructions on this page . (You can ignore the \"Next steps\" section at the bottom of that page.) 3. Create AWS credentials for use with Ambit \u00b6 Ambit integrates with Amazon's cloud storage service, Amazon Simple Storage Service (Amazon S3) . To enable this integration, you will need to provide AWS credentials that allow access to Amazon S3. The easiest way to generate these credentials is to create a new AWS Identity Access & Management (IAM) user in your AWS account. Follow this guide to create a new IAM user having AmazonS3FullAccess permissions. 4. Install Houdini Engine for UE4 \u00b6 Some Ambit functionality leverages the Houdini Engine , a 3D content creation tool from SideFX. There are many flavors of Houdini available including a free version called \"Houdini Engine for Unreal\". That is the version we will use with Ambit. Acquire a free license for Houdini Engine for Unreal by clicking the relevant \"Add To Cart\" button on this web page and completing the checkout process. Download and install the \"Houdini Launcher\" from the SideFX download page . Once installed, launch the Houdini Launcher. Click the 1 \"Install\" button and select 2 the latest \"Production Build\" of Houdini 19.0.x. When prompted with the Preferences dialog keep the default settings and enable the 3 \"Unreal Plug-In\" and 4 \"Automatically Install SideFX Labs\" options, then click 5 \"Save\". Once installation completes click on the 6 \"Licenses\" tab. Then click the 7 \"License Administrator\" button. Two windows will appear. The \"Entitlements\" window should display your available \"Houdini Engine for Unity/Unreal\" licenses. Set the 8 \"Quantity\" value to \"1\" and click the 9 \"Install\" button. The remaining Houdini Administrator window should now reflect that you've successfully configured your Houdini license. You may close both this window and the Houdini Launcher. Next, you'll add the Houdini Engine plugin to your Unreal Engine install. Do this by copying the \"HoudiniEngine\" folder from... C:\\Program Files\\Side Effects Software\\Houdini Engine\\Unreal\\19.0.x\\4.27\\HoudiniEngine ...to the following location... C:\\Program Files\\Epic Games\\UE_4.27\\Engine\\Plugins\\Runtime\\HoudiniEngine 4. Add the AWSAmbit.hda to your Houdini Engine install \u00b6 The final part of setting up Houdini Engine is to copy one of the Ambit plugin files to your Houdini install folder. Recall that you downloaded the Ambit plugin in step 1. Find this file... [AwsAmbit plugin folder]\\AWSAmbit.hda ...and copy it to the following location, creating the \"otls\" directory if necessary... C:\\Users\\[username]\\Documents\\houdini19.0\\otls\\AWSAmbit.hda 5. Install the glTF Exporter UE4 plugin \u00b6 Some of Ambit's export functionality relies on the glTF Exporter plugin from Epic Games. This plugin doesn't ship with Unreal Engine but can be downloaded for free from the Unreal Engine Marketplace following the steps below. Visit the glTF Exporter Marketplace web page . If not already signed in, click the \"Sign in to Buy\" button and log in. Once logged in, click the \"Open in Launcher\" button. This will take you to the same asset page in the Marketplace tab of the Epic Games Launcher. Click the \"Install to Engine\" button and complete the installation. Congratulations! Initial setup is now complete. \ud83c\udf89 Per Project Setup \u00b6 Each time you create a new Unreal Engine project in which you'd like to use the Ambit tools you will need to add the Ambit plugin to your project following the steps below. \u23f1 Project setup takes about 5 minutes. Navigate to the Unreal Engine project to which you'd like to add Ambit. Inside that project folder create a \"Plugins\" folder (if it doesn't already exist.) [MyUnrealProject]\\Plugins\\ Find the Ambit plugin folder that you downloaded during initial setup (or re-download if necessary.) Copy that folder to the \"Plugins\" directory you just created. [MyUnrealProject]\\Plugins\\AwsAmbit\\ Open your Unreal Engine project. In the Content Browser, click the 1 \"View Options\" button and enable the 2 \"Show Plugin Content\" option. You should then see the 3 \"Ambit Content\" folder listed in the Sources pane. (You may need to toggle the icon to reveal the Sources pane.) Congratulations! Your project is now ready to go. \ud83c\udf89","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#initial-setup-one-time","text":"Complete the following setup before using Ambit for the first time. \u23f1 Initial setup takes about 20 minutes. \ud83d\uded1 Ambit is implemented as a plugin for the Windows version of Unreal Engine 4 (UE4). Therefore, Windows is required. However, the content you create with Ambit can be exported and used with other versions of UE4 (Mac, Linux) or even non-UE4 simulators and 3D tools. \ud83d\uded1 These instructions assume you already have Unreal Engine 4.27 installed. If you don't, you can download Unreal Engine for free . Choose the Unreal Engine license that is appropriate for your team. Ambit will work with any Unreal Engine license.","title":"Initial Setup (One-Time)"},{"location":"setup/#per-project-setup","text":"Each time you create a new Unreal Engine project in which you'd like to use the Ambit tools you will need to add the Ambit plugin to your project following the steps below. \u23f1 Project setup takes about 5 minutes. Navigate to the Unreal Engine project to which you'd like to add Ambit. Inside that project folder create a \"Plugins\" folder (if it doesn't already exist.) [MyUnrealProject]\\Plugins\\ Find the Ambit plugin folder that you downloaded during initial setup (or re-download if necessary.) Copy that folder to the \"Plugins\" directory you just created. [MyUnrealProject]\\Plugins\\AwsAmbit\\ Open your Unreal Engine project. In the Content Browser, click the 1 \"View Options\" button and enable the 2 \"Show Plugin Content\" option. You should then see the 3 \"Ambit Content\" folder listed in the Sources pane. (You may need to toggle the icon to reveal the Sources pane.) Congratulations! Your project is now ready to go. \ud83c\udf89","title":"Per Project Setup"},{"location":"spawn-in-volume/","text":"Spawn in Volume Actor \u00b6 The Spawn in Volume actor works by using the position of the actor and the pre-made box component attached to the actor to determine the rectangular area where obstacles will be spawned. If the bounded area contains multiple surface types, you can fine tune the Spawn in Volume 's behavior by specifying by 2 surface name pattern and/or by tag (see Ambit Spawner: How To Use Tags ). This will limit obstacles to spawn only on the surfaces that match your specifications within the bounded area. If you don't want to manually specify surfaces, there is also the option to 1 snap all spawned obstacles to any surfaces below the bounded area. Spawn in Volume will use the 3 density range and the 5 rotation range you provide to instantiate copies of an Unreal Engine actor randomly selected from an 7 array of Unreal Engine actors you've chosen within the box component's bounds. If you want all spawned obstacles to face the same direction, you can select 4 Restrict to One Rotation and Spawn in Volume will automatically update the range's maximum to equal its minimum. To enable physics simulation on your spawned obstacles, just select 6 Add Physics . By default, the Spawn in Volume will remove overlaps, but this behavior can be turned off by unselecting 8 Remove Overlaps . To change the placement pattern, just adjust the 9 Random Seed value. Using Spawn in Volume \u00b6 After adding a Spawn in Volume instance to your map you will see an icon like this. You can place it at any 3D location you'd like. The position of the Spawn in Volume instance is the center of the bounding plane. You can transform the Spawn in Volume instance by rotation, translation, and scaling to adjust the rotation, position, and size of the box component. The box component's dimensions can also be changed in the Shape category of the Details panel. If you specified surfaces for Spawn in Volume using surface name pattern and/or tags , or if you choose Snap to Surface Below , Spawn in Volume will calculate the appropriate height (Z-axis) for each of the spawned obstacles. If no surfaces are specified and Snap to Surface Below, then AmbitSpawnerBounding will its height for all of the spawned obstacles. Examples \u00b6 It's easiest to understand the effect of each of the Spawn in Volume parameters by seeing them in action. You will find a variety of examples in the Spawn in Volume Examples section .","title":"Spawn in Volume"},{"location":"spawn-in-volume/#spawn-in-volume-actor","text":"The Spawn in Volume actor works by using the position of the actor and the pre-made box component attached to the actor to determine the rectangular area where obstacles will be spawned. If the bounded area contains multiple surface types, you can fine tune the Spawn in Volume 's behavior by specifying by 2 surface name pattern and/or by tag (see Ambit Spawner: How To Use Tags ). This will limit obstacles to spawn only on the surfaces that match your specifications within the bounded area. If you don't want to manually specify surfaces, there is also the option to 1 snap all spawned obstacles to any surfaces below the bounded area. Spawn in Volume will use the 3 density range and the 5 rotation range you provide to instantiate copies of an Unreal Engine actor randomly selected from an 7 array of Unreal Engine actors you've chosen within the box component's bounds. If you want all spawned obstacles to face the same direction, you can select 4 Restrict to One Rotation and Spawn in Volume will automatically update the range's maximum to equal its minimum. To enable physics simulation on your spawned obstacles, just select 6 Add Physics . By default, the Spawn in Volume will remove overlaps, but this behavior can be turned off by unselecting 8 Remove Overlaps . To change the placement pattern, just adjust the 9 Random Seed value.","title":"Spawn in Volume Actor"},{"location":"spawn-in-volume/#using-spawn-in-volume","text":"After adding a Spawn in Volume instance to your map you will see an icon like this. You can place it at any 3D location you'd like. The position of the Spawn in Volume instance is the center of the bounding plane. You can transform the Spawn in Volume instance by rotation, translation, and scaling to adjust the rotation, position, and size of the box component. The box component's dimensions can also be changed in the Shape category of the Details panel. If you specified surfaces for Spawn in Volume using surface name pattern and/or tags , or if you choose Snap to Surface Below , Spawn in Volume will calculate the appropriate height (Z-axis) for each of the spawned obstacles. If no surfaces are specified and Snap to Surface Below, then AmbitSpawnerBounding will its height for all of the spawned obstacles.","title":"Using Spawn in Volume"},{"location":"spawn-in-volume/#examples","text":"It's easiest to understand the effect of each of the Spawn in Volume parameters by seeing them in action. You will find a variety of examples in the Spawn in Volume Examples section .","title":"Examples"},{"location":"spawn-on-path/","text":"Spawn on Path Actor \u00b6 The Spawn on Path actor works by using the position of the Spawn on Path and the pre-made spline component attached to the actor to determine the path of the line or curve along which obstacles will be spawned. If the spline curve traverses multiple surface types, you can fine tune the Spawn on Path 's behavior by 2 Surface Name Pattern and/or by Surface Tags (see Ambit Spawner: How To Use Tags ). This will limit obstacles to spawn only along portions of the spline curve that are above the specified surfaces. If you don't want to manually specify surfaces, there is also the option to 1 snap all spawned obstacles to any surfaces below the path of the spline. Spawn on Path will use the 3 density range to instantiate copies of the Unreal Engine actor randomly selected from an 7 array of Unreal Engine actors you've chosen within the box component's bounds. The orientation of all spawned objects can be controlled using the 5 Degree of Rotation range, unless all spawned obstacles are required to face the same direction using Restrict to One Rotation , in which case the rotation will automatically update the range's maximum to equal its minimum. Spawn on Path also provides the option to 4 Follow Spline Rotation to orient the objects relative to the spline rotation. To enable physics simulation on your spawned obstacles, just select 6 Add Physics . By default, the Spawn on Path will remove overlaps, but this behavior can be turned off by unselecting 8 Remove Overlaps . To change the placement pattern, just adjust the 9 Random Seed value. Using Spawn on Path \u00b6 After adding a Spawn on Path to your map you will see an icon like this. You can place it at any 3D location you'd like. The position of the Spawn on Path instance is the starting point of the spline path. You can transform the Spawn on Path instance by rotation, translation, and scaling to adjust the orientation, position, and length of the spline. The spline component's spline points can be moved, created, and deleted directly in the viewport or through the Selected Points category of the Details panel. If you specified surfaces for Spawn on Path using surface name pattern and/or tags , or if you choose Snap to Surface Below , Spawn on Path will calculate the appropriate height (Z-axis) for each of the spawned obstacles. If no surfaces are specified and Snap to Surface Below, then Spawn on Path will use its height for all of the spawned obstacles. Examples \u00b6 It's easiest to understand the effect of each of the Spawn on Path parameters by seeing them in action. You will find a variety of examples in the Spawn on Path Examples section .","title":"Spawn on Path"},{"location":"spawn-on-path/#spawn-on-path-actor","text":"The Spawn on Path actor works by using the position of the Spawn on Path and the pre-made spline component attached to the actor to determine the path of the line or curve along which obstacles will be spawned. If the spline curve traverses multiple surface types, you can fine tune the Spawn on Path 's behavior by 2 Surface Name Pattern and/or by Surface Tags (see Ambit Spawner: How To Use Tags ). This will limit obstacles to spawn only along portions of the spline curve that are above the specified surfaces. If you don't want to manually specify surfaces, there is also the option to 1 snap all spawned obstacles to any surfaces below the path of the spline. Spawn on Path will use the 3 density range to instantiate copies of the Unreal Engine actor randomly selected from an 7 array of Unreal Engine actors you've chosen within the box component's bounds. The orientation of all spawned objects can be controlled using the 5 Degree of Rotation range, unless all spawned obstacles are required to face the same direction using Restrict to One Rotation , in which case the rotation will automatically update the range's maximum to equal its minimum. Spawn on Path also provides the option to 4 Follow Spline Rotation to orient the objects relative to the spline rotation. To enable physics simulation on your spawned obstacles, just select 6 Add Physics . By default, the Spawn on Path will remove overlaps, but this behavior can be turned off by unselecting 8 Remove Overlaps . To change the placement pattern, just adjust the 9 Random Seed value.","title":"Spawn on Path Actor"},{"location":"spawn-on-path/#using-spawn-on-path","text":"After adding a Spawn on Path to your map you will see an icon like this. You can place it at any 3D location you'd like. The position of the Spawn on Path instance is the starting point of the spline path. You can transform the Spawn on Path instance by rotation, translation, and scaling to adjust the orientation, position, and length of the spline. The spline component's spline points can be moved, created, and deleted directly in the viewport or through the Selected Points category of the Details panel. If you specified surfaces for Spawn on Path using surface name pattern and/or tags , or if you choose Snap to Surface Below , Spawn on Path will calculate the appropriate height (Z-axis) for each of the spawned obstacles. If no surfaces are specified and Snap to Surface Below, then Spawn on Path will use its height for all of the spawned obstacles.","title":"Using Spawn on Path"},{"location":"spawn-on-path/#examples","text":"It's easiest to understand the effect of each of the Spawn on Path parameters by seeing them in action. You will find a variety of examples in the Spawn on Path Examples section .","title":"Examples"},{"location":"spawn-on-surface/","text":"Spawn on Surface Actor \u00b6 One of the drag-and-drop tools is called Spawn on Surface actor. By configuring a few simple parameters on this instance, you can generate endless placement variations for anything from trash cans to tricycles, fire hydrants to foliage. This works by querying the simulation world for surfaces that you specify. Surfaces can be indicated by 1 Surface Name Pattern 2 and/or by Surface Tag (see How To Use Tags below). When your simulation starts, the Spawn on Surface instantiates copies of an Unreal Engine actor randomly selected from an 7 array of Unreal Engine actors you've chosen onto those surfaces in a random pattern at random angles using the 3 density range and the 5 rotation range you provide. If you just want all spawned obstacles to face the same direction, you can select 4 Restrict to One Rotation and Spawn on Surface will automatically update the range's maximum to equal its minimum. To enable physics simulation on your spawned obstacles, just select 6 Add Physics . By default, the Spawn on Surface will remove overlaps, but this behavior can be turned off by unselecting 8 Remove Overlaps . A 9 Random Seed value drives the random placement pattern. Don't like the pattern? Just enter a different random seed to try a new one. Using Spawn on Surface \u00b6 After adding a Spawn on Surface instance to your map you will see an icon like this. You can place it at any 3D location you'd like. Its placement isn't important. Examples \u00b6 It's easiest to understand the effect of each of the Spawn on Surface parameters by seeing them in action. You will find a variety of examples in the Spawn on Surface Examples section .","title":"Spawn on Surface"},{"location":"spawn-on-surface/#spawn-on-surface-actor","text":"One of the drag-and-drop tools is called Spawn on Surface actor. By configuring a few simple parameters on this instance, you can generate endless placement variations for anything from trash cans to tricycles, fire hydrants to foliage. This works by querying the simulation world for surfaces that you specify. Surfaces can be indicated by 1 Surface Name Pattern 2 and/or by Surface Tag (see How To Use Tags below). When your simulation starts, the Spawn on Surface instantiates copies of an Unreal Engine actor randomly selected from an 7 array of Unreal Engine actors you've chosen onto those surfaces in a random pattern at random angles using the 3 density range and the 5 rotation range you provide. If you just want all spawned obstacles to face the same direction, you can select 4 Restrict to One Rotation and Spawn on Surface will automatically update the range's maximum to equal its minimum. To enable physics simulation on your spawned obstacles, just select 6 Add Physics . By default, the Spawn on Surface will remove overlaps, but this behavior can be turned off by unselecting 8 Remove Overlaps . A 9 Random Seed value drives the random placement pattern. Don't like the pattern? Just enter a different random seed to try a new one.","title":"Spawn on Surface Actor"},{"location":"spawn-on-surface/#using-spawn-on-surface","text":"After adding a Spawn on Surface instance to your map you will see an icon like this. You can place it at any 3D location you'd like. Its placement isn't important.","title":"Using Spawn on Surface"},{"location":"spawn-on-surface/#examples","text":"It's easiest to understand the effect of each of the Spawn on Surface parameters by seeing them in action. You will find a variety of examples in the Spawn on Surface Examples section .","title":"Examples"},{"location":"spawn-vehicle-path-parent/","text":"Ambit Dynamic Obstacle Placement \u00b6 Ambit provides drag-and-drop tool that enables easy placement and path generation for dynamic items in your simulation scenarios and generate path for them. Spawn Vehicle Path Currently, Ambit only supports generating a fixed path and spawning a single vehicle on it. The functionality sits in Actor Spawn Vehicle Path . This actor class can be found in the AWS Ambit category of the Place Actors panel.","title":"Overview"},{"location":"spawn-vehicle-path-parent/#ambit-dynamic-obstacle-placement","text":"Ambit provides drag-and-drop tool that enables easy placement and path generation for dynamic items in your simulation scenarios and generate path for them. Spawn Vehicle Path Currently, Ambit only supports generating a fixed path and spawning a single vehicle on it. The functionality sits in Actor Spawn Vehicle Path . This actor class can be found in the AWS Ambit category of the Place Actors panel.","title":"Ambit Dynamic Obstacle Placement"},{"location":"spawn-vehicle-path/","text":"Spawn Vehicle Path Actor \u00b6 The Spawn Vehicle Path actor can be used to generate a path and spawn a single vehicle running along this path by easily doing drag-and-drop, configurating parameters and tweaking the curves. The Spawn Vehicle Path tool works by using the position of the Spawn Vehicle Path actor and the pre-made spline component attached to the actor to determine the path of the vehicle, which will run along the determined path. At runtime, a list of Waypoints will be generated along the path/curve defined by the spline. They will be separated by the fixed distance (unit in meter) specified by 2 Distance Between Waypoints . At the same time, a copy of vehicle which can be set at 4 Vehicle to Spawn ( AWheeledVehicle ), will be instantiated at the beginning of the path. The vehicle will try follow the path by reaching each waypoint from beginning and achieve the Speed Limit (unit in km/h) set at 1 . 3 Show Debug Waypoints can be toggled to visualize the waypoints at runtime, for debugging purposes. Using Spawn Vehicle Path \u00b6 You can use one or more Spawn Vehicle Path instances within a scene. To add an instance, drag-drop the Spawn Vehicle Path class from the Content Browser or the AWS Ambit category tab in the Place Actors panel into your map. You'll find the class under \"Ambit C++ Classes/Ambit/Actors/Spawners\" . After adding an Spawn Vehicle Path to your map you will see an icon like this. You should place it at a 3D location where it's on or above the surface/ground you'd like the vehicle to spawn. The position of the Spawn Vehicle Path instance is the default starting point of the spline path. You can transform the Spawn Vehicle Path instance by rotation, translation, and scaling to adjust the orientation, position, and length of the spline. You can also add more spline points or manipulate each spline point directly in the viewport or through the Selected Points category of the Details panel. In fact, a better way to construct and view the whole path is to switch to the Orthographic view of camera and manipulate the spline points there. Within the Spline component panel, you can also toggle the Closed Loop check box to make the spline a closed loop which will connect the last spline point to the first spline point automatically. The spawned vehicle will then run infinitely along the loop instead of stopping at the end in a normal open spline. Vehicle to spawn set has to be of class or a derived class of AWheeledVehicle . Example vehicle blueprint assets can be found in Unreal Marketplace like this or you can follow Unreal tutorial here to create your own vehicle asset. Examples \u00b6 If you set everything up, you should see the spawned vehicle running along the path with optional display of waypoints.","title":"Spawn Vehicle Path"},{"location":"spawn-vehicle-path/#spawn-vehicle-path-actor","text":"The Spawn Vehicle Path actor can be used to generate a path and spawn a single vehicle running along this path by easily doing drag-and-drop, configurating parameters and tweaking the curves. The Spawn Vehicle Path tool works by using the position of the Spawn Vehicle Path actor and the pre-made spline component attached to the actor to determine the path of the vehicle, which will run along the determined path. At runtime, a list of Waypoints will be generated along the path/curve defined by the spline. They will be separated by the fixed distance (unit in meter) specified by 2 Distance Between Waypoints . At the same time, a copy of vehicle which can be set at 4 Vehicle to Spawn ( AWheeledVehicle ), will be instantiated at the beginning of the path. The vehicle will try follow the path by reaching each waypoint from beginning and achieve the Speed Limit (unit in km/h) set at 1 . 3 Show Debug Waypoints can be toggled to visualize the waypoints at runtime, for debugging purposes.","title":"Spawn Vehicle Path Actor"},{"location":"spawn-vehicle-path/#using-spawn-vehicle-path","text":"You can use one or more Spawn Vehicle Path instances within a scene. To add an instance, drag-drop the Spawn Vehicle Path class from the Content Browser or the AWS Ambit category tab in the Place Actors panel into your map. You'll find the class under \"Ambit C++ Classes/Ambit/Actors/Spawners\" . After adding an Spawn Vehicle Path to your map you will see an icon like this. You should place it at a 3D location where it's on or above the surface/ground you'd like the vehicle to spawn. The position of the Spawn Vehicle Path instance is the default starting point of the spline path. You can transform the Spawn Vehicle Path instance by rotation, translation, and scaling to adjust the orientation, position, and length of the spline. You can also add more spline points or manipulate each spline point directly in the viewport or through the Selected Points category of the Details panel. In fact, a better way to construct and view the whole path is to switch to the Orthographic view of camera and manipulate the spline points there. Within the Spline component panel, you can also toggle the Closed Loop check box to make the spline a closed loop which will connect the last spline point to the first spline point automatically. The spawned vehicle will then run infinitely along the loop instead of stopping at the end in a normal open spline. Vehicle to spawn set has to be of class or a derived class of AWheeledVehicle . Example vehicle blueprint assets can be found in Unreal Marketplace like this or you can follow Unreal tutorial here to create your own vehicle asset.","title":"Using Spawn Vehicle Path"},{"location":"spawn-vehicle-path/#examples","text":"If you set everything up, you should see the spawned vehicle running along the path with optional display of waypoints.","title":"Examples"},{"location":"spawn-with-houdini/","text":"Spawn with Houdini Digital Assets Actor \u00b6 Ambit provides a tool to enable easy placement and randomization of your Houdini Obstacles. This tool is called Spawn with Houdini actor and operates very similarly to the Spawn on Surface Ambit Spawner. \u26a0\ufe0f Important: This spawner type leverages the Houdini Engine. Be sure you have installed both the Houdini Engine and the Houdini plugin for Unreal before using this tool. See the Setup section of this user guide for instructions. Using Spawn with Houdini \u00b6 The Spawn with Houdini works very similarly to the Spawn on Surface . The main difference being that you can trigger the generate by the Generate Obstacles button while in the editor, and can specify Houdini Digital Assets to be selected as what to spawn. Houdini Digital Assets (HDAs) have the ability to surface user parameters for a user to update to customize what look the obstacle has. While in the editor mode, the Spawn with Houdini instance allows users to 1 generate many instances of an HDA which then randomizes the \"seed\" parameters of the HDA. By generating the obstacles here, you can pre-cook the HDAs to the screen to save on loading later. Obstacles generated at this phase will not regenerate when pressing play, nor be deleted once the play has finished. If you are not happy with the results or want to clean your world of these spawned obstacles - simply click the 2 Clear Obstacles button. You can always change the randomization of locations and parameters by updating the 3 Random Seed . To dictate where the obstacles are spawned a 4 similar form can be filled out as the Spawn on Surface to match by Surface Name Pattern and/or by Surface Tag . The number of generated obstacles can be controlled using the 5 density range. The user can select which HDA they want to spawn in bulk by selecting it as the 6 Houdini Asset from the dropdown. Note: This asset must already be imported into Unreal Engine via the Houdini Plugin. While in the play mode, the Spawn with Houdini will automatically generate with the settings specified. These assets will also automatically be removed once the play has finished. Note: The Spawn with Houdini will only generate obstacles in play mode if there has not already been spawned actors from the editor mode. Further Usage \u00b6 Multiple Spawn with Houdini actors can be placed on the scene, allowing users to create any number of settings to place HDA to the screen. If you wish to spawn more assets using the same configuration, press the 7 + symbol on top this will add a new entry. Expand the selection that appears to put in a different HDA to spawn. One of the HDA from this list will spawn on the locations that are available to spawn. You can customize which parameters are randomized from an HDA by adding their value into the 8 Parameters to Randomize section. These are the underlying parameter names in the HDA, and can be added so that specific part is randomized when the object is created. If you do not specify anything, Spawn With Houdini will automatically look for the \"seed\" parameter of the HDA and place this in the list automatically.","title":"Spawn with Houdini Digital Assets"},{"location":"spawn-with-houdini/#spawn-with-houdini-digital-assets-actor","text":"Ambit provides a tool to enable easy placement and randomization of your Houdini Obstacles. This tool is called Spawn with Houdini actor and operates very similarly to the Spawn on Surface Ambit Spawner. \u26a0\ufe0f Important: This spawner type leverages the Houdini Engine. Be sure you have installed both the Houdini Engine and the Houdini plugin for Unreal before using this tool. See the Setup section of this user guide for instructions.","title":"Spawn with Houdini Digital Assets Actor"},{"location":"spawn-with-houdini/#using-spawn-with-houdini","text":"The Spawn with Houdini works very similarly to the Spawn on Surface . The main difference being that you can trigger the generate by the Generate Obstacles button while in the editor, and can specify Houdini Digital Assets to be selected as what to spawn. Houdini Digital Assets (HDAs) have the ability to surface user parameters for a user to update to customize what look the obstacle has. While in the editor mode, the Spawn with Houdini instance allows users to 1 generate many instances of an HDA which then randomizes the \"seed\" parameters of the HDA. By generating the obstacles here, you can pre-cook the HDAs to the screen to save on loading later. Obstacles generated at this phase will not regenerate when pressing play, nor be deleted once the play has finished. If you are not happy with the results or want to clean your world of these spawned obstacles - simply click the 2 Clear Obstacles button. You can always change the randomization of locations and parameters by updating the 3 Random Seed . To dictate where the obstacles are spawned a 4 similar form can be filled out as the Spawn on Surface to match by Surface Name Pattern and/or by Surface Tag . The number of generated obstacles can be controlled using the 5 density range. The user can select which HDA they want to spawn in bulk by selecting it as the 6 Houdini Asset from the dropdown. Note: This asset must already be imported into Unreal Engine via the Houdini Plugin. While in the play mode, the Spawn with Houdini will automatically generate with the settings specified. These assets will also automatically be removed once the play has finished. Note: The Spawn with Houdini will only generate obstacles in play mode if there has not already been spawned actors from the editor mode.","title":"Using Spawn with Houdini"},{"location":"spawn-with-houdini/#further-usage","text":"Multiple Spawn with Houdini actors can be placed on the scene, allowing users to create any number of settings to place HDA to the screen. If you wish to spawn more assets using the same configuration, press the 7 + symbol on top this will add a new entry. Expand the selection that appears to put in a different HDA to spawn. One of the HDA from this list will spawn on the locations that are available to spawn. You can customize which parameters are randomized from an HDA by adding their value into the 8 Parameters to Randomize section. These are the underlying parameter names in the HDA, and can be added so that specific part is randomized when the object is created. If you do not specify anything, Spawn With Houdini will automatically look for the \"seed\" parameter of the HDA and place this in the list automatically.","title":"Further Usage"},{"location":"spawner-examples/","text":"Examples \u00b6 Spawn on Surface Examples \u00b6 The following examples help illustrate the effect of each of the Spawn on Surface parameter. Each example uses the scene detailed below. Example #1 \u00b6 Placement by surface name only. Example #2 \u00b6 This example is the same as above with only the Random seed value changed. Not only does this result in different placement of the boxes, it also results in a different density, randomly chosen from within the specified range. Example #3 \u00b6 Placement by tag only. Example #4 \u00b6 Placement requiring both surface name and tag to match the provided values. Example #5 \u00b6 Placement requiring either surface name or tag to match the provided values. Example #6 \u00b6 Placement requiring both surface name or tag to match the provided values, and with rotation restricted to one rotation (90 degrees). Example #7 \u00b6 Placement requiring either surface name or tag to match the provided values, and with rotation restricted to a range (45-90 degrees). Example #8 \u00b6 Placement requiring either surface name and tag to match the provided values, and with two Unreal Engine actor types to spawn. Spawn in Volume Examples \u00b6 Example 1 \u00b6 Placement by bounding box only, without Snap to Surface Below or specified surfaces. Example 2 \u00b6 Placement by bounding box and Snap to Surface Below , without specified surfaces. Example 3 \u00b6 Placement by bounding box and specified surfaces. Spawn on Path Examples \u00b6 Example 1 \u00b6 Placement by spline only, without Snap to Surface Below or specified surfaces. Example 2 \u00b6 Placement by spline and Snap to Surface Below , without specified surfaces. Example 3 \u00b6 Placement by spline and specified surfaces (name pattern Road ). Example 4 \u00b6 Placement by spline, Snap to Surface Below , and Follow Spline Rotation . The spline was edited to include a curve.","title":"Ambit Spawner Examples"},{"location":"spawner-examples/#examples","text":"","title":"Examples"},{"location":"spawner-examples/#spawn-on-surface-examples","text":"The following examples help illustrate the effect of each of the Spawn on Surface parameter. Each example uses the scene detailed below.","title":"Spawn on Surface Examples"},{"location":"spawner-examples/#spawn-in-volume-examples","text":"","title":"Spawn in Volume Examples"},{"location":"spawner-examples/#spawn-on-path-examples","text":"","title":"Spawn on Path Examples"},{"location":"spawner-parent/","text":"Ambit Static Item Generation \u00b6 Ambit provides several drag-and-drop tools to enable easy placement of static items in your simulation scenarios. The collection of these tools are referred to as Ambit Spawners . Spawn on Surface Spawn in Volume Spawn on Path While there are variations between these tools, the three of them share most of their functionality. Spawn in Volume and Spawn on Path have a couple of extra parameters, since they provide higher level of customization, but they work in a similar way to Spawn on Surface . All Ambit Spawner tools utilize two of Unreal Engine's custom collision channels: ECC_GameTraceChannel1 and ECC_GameTraceChannel2. These are used for collision detection by the obstacles spawned by the Ambit Spawner tools. These actor classes can be found in the AWS Ambit category of the Place Actors panel. How To Use Spawners \u00b6 You can use one or more Spawner instances within a scene. To add an instance, drag-drop the Spawner class from the the AWS Ambit category tab in the Place Actors panel or Content Browser into your map. You'll find the classes under \"Ambit C++ Classes/Ambit/Actors/Spawners\". After you place the spawners in the viewport and setup all parameters, you can enter the play mode by clicking the play button and it will spawn the assets. How To Use Tags \u00b6 CAUTION! The UE Editor's UI for adding actor tags is confusing. Be sure to follow the steps below when using tags. To tag an actor, follow these steps: Select the actor in your map or in the World Outliner . In the Details tab, use the \"Search details\" field to search for the word \" tags \". You will see the following. Use the Actor > Tags array property, not the Tags > Component Tags array property. You can add tags clicking the \u271a icon. You can delete a tag by clicking the \u25be icon next to the tag and selecting \"Delete\".","title":"Overview"},{"location":"spawner-parent/#ambit-static-item-generation","text":"Ambit provides several drag-and-drop tools to enable easy placement of static items in your simulation scenarios. The collection of these tools are referred to as Ambit Spawners . Spawn on Surface Spawn in Volume Spawn on Path While there are variations between these tools, the three of them share most of their functionality. Spawn in Volume and Spawn on Path have a couple of extra parameters, since they provide higher level of customization, but they work in a similar way to Spawn on Surface . All Ambit Spawner tools utilize two of Unreal Engine's custom collision channels: ECC_GameTraceChannel1 and ECC_GameTraceChannel2. These are used for collision detection by the obstacles spawned by the Ambit Spawner tools. These actor classes can be found in the AWS Ambit category of the Place Actors panel.","title":"Ambit Static Item Generation"},{"location":"spawner-parent/#how-to-use-spawners","text":"You can use one or more Spawner instances within a scene. To add an instance, drag-drop the Spawner class from the the AWS Ambit category tab in the Place Actors panel or Content Browser into your map. You'll find the classes under \"Ambit C++ Classes/Ambit/Actors/Spawners\". After you place the spawners in the viewport and setup all parameters, you can enter the play mode by clicking the play button and it will spawn the assets.","title":"How To Use Spawners"},{"location":"weather/","text":"Ambit Weather System \u00b6 This section will cover how to set up Ambit Weather System and how to use it to generate time of day and weather scenarios. Setting Up Ambit Weather in Your Scene \u00b6 First make sure you delete any existing lights for the sun, moon, and skylight, as well as any existing fog actors, or sky atmosphere actors from your scene to avoid potential conflicts of lights. Drag the Ambit Weather actor BP_EnvironmentFX into your scene from Ambit/EnvironmentFX folder. You can change the Mobility category for the components but please make sure the Mobility of Directional Light Component is always set to Moveable. You can also use the TestWeatherMap in the EnvironmentFX/TestMap folder that has already set up Ambit Weather. To use the Ambit Weather System, start a play session with either of the following preview types: Play In Editor (PIE) by pressing Play Button or Simulate In Editor (SIE) preview by the Play dropdown menu (Alt + S). If you use PIE, please enter F8 so you can get your mouse cursor to control the Editor Mode panel. Changing the Time of Day \u00b6 Change the Time of Day slider in Ambit Editor Mode to adjust the time of day. The range of Time of Day slider is from 0.0 to 23.99999 which is to simplify solar time setting. You can use the Preset Time of Day dropdown menu to select \"Morning\" (6.0), \"Noon\" (12.0), \"Evening\" (18.0), or \"Night\" (0.0) scenario. Changing the Weather \u00b6 You can select the preset weather type from Weather Types dropdown menu: Sunny, Rainy and Foggy. You can also change the Weather Parameters to customize the scenario. Our current Weather Parameters contain Cloudiness, Precipitation, Precipitation Deposits, Wetness, and Fog Density. The Cloudiness is to control the clouds coverage. The Precipitation is to control the rain intensity. The Precipitation Deposits is to control the puddles. The Wetness is to control the wetness intensity in the rainy day. The Fog Density is to control the fog thickness or concentrations. Setting Up Material Effects \u00b6 AmbitWeather requires that you make some modifications to your scene's materials so that they'll appropriately reflect the various weather attributes like \"Wetness\". To accomplish this, we've provided a special material function called \"MF_Rain\". You simply add this material function to each of your materials using the Material Editor to make your materials AmbitWeather-compatible. Here's how: Drag the \"MF_Rain\" material function from EnvironmentFX/Rain folder into your materials or right-click a blank place in your Material Editor and search for \"MF_Rain\". Connect inputs: Base Color, Normal, Rain, Wetness and Puddles are required inputs. Metallic, Specular and Roughness are optional. Connect outputs: Base Color, Specular, Roughness and Normal. The \"MF_Rain\" can make surfaces wet, and generate rain drop, rain drip, puddles, and ripples effects. You can find some example materials with the rain material function in EnvironmentFX/Example_Materials.","title":"Overview"},{"location":"weather/#ambit-weather-system","text":"This section will cover how to set up Ambit Weather System and how to use it to generate time of day and weather scenarios.","title":"Ambit Weather System"},{"location":"weather/#setting-up-ambit-weather-in-your-scene","text":"First make sure you delete any existing lights for the sun, moon, and skylight, as well as any existing fog actors, or sky atmosphere actors from your scene to avoid potential conflicts of lights. Drag the Ambit Weather actor BP_EnvironmentFX into your scene from Ambit/EnvironmentFX folder. You can change the Mobility category for the components but please make sure the Mobility of Directional Light Component is always set to Moveable. You can also use the TestWeatherMap in the EnvironmentFX/TestMap folder that has already set up Ambit Weather. To use the Ambit Weather System, start a play session with either of the following preview types: Play In Editor (PIE) by pressing Play Button or Simulate In Editor (SIE) preview by the Play dropdown menu (Alt + S). If you use PIE, please enter F8 so you can get your mouse cursor to control the Editor Mode panel.","title":"Setting Up Ambit Weather in Your Scene"},{"location":"weather/#changing-the-time-of-day","text":"Change the Time of Day slider in Ambit Editor Mode to adjust the time of day. The range of Time of Day slider is from 0.0 to 23.99999 which is to simplify solar time setting. You can use the Preset Time of Day dropdown menu to select \"Morning\" (6.0), \"Noon\" (12.0), \"Evening\" (18.0), or \"Night\" (0.0) scenario.","title":"Changing the Time of Day"},{"location":"weather/#changing-the-weather","text":"You can select the preset weather type from Weather Types dropdown menu: Sunny, Rainy and Foggy. You can also change the Weather Parameters to customize the scenario. Our current Weather Parameters contain Cloudiness, Precipitation, Precipitation Deposits, Wetness, and Fog Density. The Cloudiness is to control the clouds coverage. The Precipitation is to control the rain intensity. The Precipitation Deposits is to control the puddles. The Wetness is to control the wetness intensity in the rainy day. The Fog Density is to control the fog thickness or concentrations.","title":"Changing the Weather"},{"location":"weather/#setting-up-material-effects","text":"AmbitWeather requires that you make some modifications to your scene's materials so that they'll appropriately reflect the various weather attributes like \"Wetness\". To accomplish this, we've provided a special material function called \"MF_Rain\". You simply add this material function to each of your materials using the Material Editor to make your materials AmbitWeather-compatible. Here's how: Drag the \"MF_Rain\" material function from EnvironmentFX/Rain folder into your materials or right-click a blank place in your Material Editor and search for \"MF_Rain\". Connect inputs: Base Color, Normal, Rain, Wetness and Puddles are required inputs. Metallic, Specular and Roughness are optional. Connect outputs: Base Color, Specular, Roughness and Normal. The \"MF_Rain\" can make surfaces wet, and generate rain drop, rain drip, puddles, and ripples effects. You can find some example materials with the rain material function in EnvironmentFX/Example_Materials.","title":"Setting Up Material Effects"}]}